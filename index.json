[{"body":"Gossip, at a very high level, is a specification for an API that allows different bots to talk to each other in a simple and predictable way. The specification is flexible and customizable to allow for developers to customize implementations to suit their needs while also ensuring standards to allow bots of any caliber to work with each other. The specification is loosely inspired by SCIM.\nGossip allows bot developers to:\n Create an arbitrary network of bots capable of exchanging information Pull information from other clients in a network (“lookups”) Push information to other clients in a network (“notifies”) Implement and expect a common set of extensible schemas Extend or create schemas for application-specific use cases, such as IPC  The Gossip specification follows a federated model where clients (generally bots) will directly communicate with each other. While clients are generally bots, persistent datastores known as “brokers” may be present in any given Gossip network.\n","link":"https://gossip.rest/docs/fundamentals/","title":"Fundamentals"},{"body":"Welcome to the documentation for Gossip!\nGossip is an API specification to allow bots to communicate with each other. A typical use case for this would be to have multiple specialised bots all feed into one central system for cases/infractions, Gossip aims to make an open protocol to make standard implementations for this so any bot can participate in the system.\n","link":"https://gossip.rest/docs/","title":"Welcome!"},{"body":"Clients are, fundamentally, HTTP servers that allow data exchange between nodes in a Gossip network.\nGossip clients shall have four operating capabilities:\n Receiving Lookups from clients (inbound GET) Sending Lookups to clients (outbound GET) Receiving Notifies from clients (inbound POST/PUT) Sending Notifies to clients (outbound POST/PUT)  Clients are encouraged to support all above modes, however a client may only implement those that are necessary to the client’s operation. Of specific note, however, is that a client that supports receiving Notifies MUST additionally support receiving Lookups.\n","link":"https://gossip.rest/docs/fundamentals/clients/","title":"Clients"},{"body":"Tier I - Core Attributes All Schemas contain a core set of required data known as Core Attributes. Any client capable of reporting information of this schema type MUST include all Core Attributes. Core Attributes MAY be null depending on the type of data, but the field values must be present.\nTier II - Extended Attributes Schemas may contain an extended set of in-specification data values. This data MAY be provided by clients if available, but clients SHALL NOT expect this data to be present. Optional Extended Data MAY be null or missing entirely.\nTier III - Client-Specific Attributes Schemas may contain Client-Specific Attributes, which are to be considered an extension of a Schema. Client-Specific Attributes MAY be provided by clients if available. Clients SHOULD be aware of extra data although processing of this data is not required. These attributes are not defined in the specification.\n","link":"https://gossip.rest/docs/fundamentals/schemas/","title":"Schemas"},{"body":"Within this section you'll find the documentation for the resources which can be accessed and modified through Gossip.\n","link":"https://gossip.rest/docs/resources/","title":"Resources"},{"body":"ℹ️ This page needs to be moved to the API Reference, and rewritten according to the new route standards\nCases are actions tied to a specific user.\nThey include some standardised properties as well as permitting for some freeform data to be stored in JSON format.\nA case object looks like the following:\n   Field Type Description     id snowflake The unique identifier for this case   app_id snowflake The application which created this case   type string The type of case   target_id snowflake The identifier of the targeted user   target_name string The name of the targeted user   mod_id snowflake Unique identifier for the moderator who created this case   mod_name string Name of the moderator who created this case   detail string Free-form (and human-readable) description of the case   expires int? Timestamp of expiry for the case   extra json Extra freeform JSON data on the case    There are several API endpoints used for modifying cases.\nPOST /guilds/{guild_id}/mod/cases/{member_id} Create a new case for a member\nGET /guilds/{guild_id}/mod/cases/{member_id} Fetch all cases for a member\nGET /guilds/{guild_id}/mod/case/{case_id} Fetch a specific case by ID\nPATCH /guilds/{guild_id}/mod/case/{case_id} Update an existing case by ID\nDELETE /guilds/{guild_id}/mod/case/{case_id} Delete an existing case by ID\n","link":"https://gossip.rest/docs/resources/cases/","title":"Cases"},{"body":"Authentication There are two modes of authentication for routes in Gossip:\n Header-based authentication using the Authorization header. No authentication; anonymous requests.  Header-based Authentication For authenticated endpoints the client should pass an Authorization header with their bearer token:\nAuthorization: Bearer b3c98d3f Rate Limits  Content TBD  Routes The basic route format for API routes is /{version}/{topic}/{resource}. All routes detailed below assume that /{version} is used as the base URL and hence does not include that. The current API version is v1, though the version used by a server may differ from the latest version.\nMiscellaneous Routes GET /details This is not a versioned endpoint and should not be prefixed with /{version}  This endpoint details information about the server including it's capabilities and API version.\nReturn Body:\n   Field Type Description     version string The server's API version.   capabilities json A capabilities object detailing the server's capabilities.   meta json Any extra data the server wants to give about itself.    Example Body:\n1{ 2 \u0026#34;version\u0026#34;:\u0026#34;1\u0026#34;, 3 \u0026#34;capabilities\u0026#34;:{}, 4 \u0026#34;meta\u0026#34;:{ 5 \u0026#34;host\u0026#34;:{ 6 \u0026#34;language\u0026#34;:\u0026#34;Python\u0026#34;, 7 \u0026#34;library\u0026#34;:\u0026#34;Gossipy-Server\u0026#34;, 8 \u0026#34;os\u0026#34;:\u0026#34;Linux/Debian\u0026#34; 9 } 10 } 11} Message Routes POST /core/messages/new/{event_type} This endpoint creates a new message with the event type of event_type which will be POSTed to clients who have registered webhooks for that event.\nRequest Body:\n   Field Type Description     data json The JSON data of the event.    Example Body:\n1{ 2 \u0026#34;data\u0026#34;:{ 3 \u0026#34;type\u0026#34;:\u0026#34;member_join\u0026#34;, 4 \u0026#34;guild\u0026#34;:810932869862129664, 5 \u0026#34;member\u0026#34;:{ 6 \u0026#34;id\u0026#34;:297045071457681409, 7 \u0026#34;name\u0026#34;:\u0026#34;vcokltfre\u0026#34;, 8 \u0026#34;discriminator\u0026#34;:6868 9 } 10 } 11} When this endpoint is called it will create a POST request to all listeners of that event with the following data structure:\nPost Body:\n   Field Type Description     event string The event type of the message.   data json The JSON data of the event.    Example Body:\n1{ 2 \u0026#34;event\u0026#34;:\u0026#34;log\u0026#34;, 3 \u0026#34;data\u0026#34;:{ 4 \u0026#34;type\u0026#34;:\u0026#34;member_join\u0026#34;, 5 \u0026#34;guild\u0026#34;:810932869862129664, 6 \u0026#34;member\u0026#34;:{ 7 \u0026#34;id\u0026#34;:297045071457681409, 8 \u0026#34;name\u0026#34;:\u0026#34;vcokltfre\u0026#34;, 9 \u0026#34;discriminator\u0026#34;:6868 10 } 11 } 12} POST /core/messages/register/{event_type} This endpoint registers a new message listener webhook for event messages. If no event_type is passed it will be sent all events which it is authorized to receive. It is possible to register multiple events to a single webhook, therefore as previously detailed an event attribute is sent in the event POST.\nRequest Body:\n   Field Type Description     url string The webhook URL that events should be posted to.    Example Body:\n1{ 2 \u0026#34;url\u0026#34;:\u0026#34;https://gossip.vcokltf.re/event\u0026#34; 3} ","link":"https://gossip.rest/docs/resources/api-reference/","title":"API Reference"},{"body":"Gossip Gossip is an API specification to allow bots to communicate with each other. A typical use case for this would be to have multiple specialised bots all feed into one central system for cases/infractions, Gossip aims to make an open protocol to make standard implementations for this so any bot can participate in the system.\nGossip is a work in progress, things might break or be undocumented. Tread with caution!  Read the DocsView on GitHub\n","link":"https://gossip.rest/","title":"Gossip"}]